/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaces;

import code.DBConnect;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public final class AddOrder extends javax.swing.JFrame {

    /**
     * Creates new form AddOrder
     */
    Connection con = null;
    PreparedStatement pst1 = null;
    PreparedStatement pst2 = null;
    PreparedStatement pst3 = null;
    ResultSet rs1 = null;
    ResultSet rs2 = null;
    ArrayList selName = new ArrayList();
    ArrayList itemName = new ArrayList();
    ArrayList availability = new ArrayList();
    ArrayList selID = new ArrayList();
    ArrayList iID = new ArrayList();
    public ArrayList price = new ArrayList();
    String notDel = "not deleted"; 
    String t = "true";
    String email;
    public static Order o = new Order();
    int customerID;
    public static boolean onlyCustomer;
    
    public AddOrder() throws ClassNotFoundException, SQLException {
        initComponents();
        email = customerProfile.email;
        con = DBConnect.connection();
        setCustomerID();
        DefaultTableModel model = (DefaultTableModel) orderItemTable.getModel();
        setTable(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        catagoryGroup = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderItemTable = new javax.swing.JTable();
        breakfastButton = new javax.swing.JRadioButton();
        lunchButton = new javax.swing.JRadioButton();
        dinnerButton = new javax.swing.JRadioButton();
        sweetButton = new javax.swing.JRadioButton();
        fruitButton = new javax.swing.JRadioButton();
        backeryButton = new javax.swing.JRadioButton();
        bigOrderButton = new javax.swing.JRadioButton();
        orderButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();
        profileButton = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Add Order");

        orderItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seller name", "Item name ", "Availability", "price", "No of Item", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderItemTable);

        catagoryGroup.add(breakfastButton);
        breakfastButton.setText("Breakfast");
        breakfastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                breakfastButtonActionPerformed(evt);
            }
        });

        catagoryGroup.add(lunchButton);
        lunchButton.setText("Lunch");
        lunchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lunchButtonActionPerformed(evt);
            }
        });

        catagoryGroup.add(dinnerButton);
        dinnerButton.setText("Dinner");
        dinnerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dinnerButtonActionPerformed(evt);
            }
        });

        catagoryGroup.add(sweetButton);
        sweetButton.setText("Sweet");
        sweetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sweetButtonActionPerformed(evt);
            }
        });

        catagoryGroup.add(fruitButton);
        fruitButton.setText("Fruit");
        fruitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fruitButtonActionPerformed(evt);
            }
        });

        catagoryGroup.add(backeryButton);
        backeryButton.setText("Backery Items");
        backeryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backeryButtonActionPerformed(evt);
            }
        });

        catagoryGroup.add(bigOrderButton);
        bigOrderButton.setText("Big order");
        bigOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bigOrderButtonActionPerformed(evt);
            }
        });

        orderButton.setText("Order");
        orderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderButtonActionPerformed(evt);
            }
        });

        viewButton.setText("View Selected List");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        profileButton.setText("Profile");
        profileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(breakfastButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lunchButton)
                            .addComponent(dinnerButton)
                            .addComponent(sweetButton)
                            .addComponent(fruitButton)
                            .addComponent(backeryButton)
                            .addComponent(bigOrderButton))
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(viewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(orderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(profileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(breakfastButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lunchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dinnerButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sweetButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fruitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backeryButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bigOrderButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(72, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(profileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(orderButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void breakfastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breakfastButtonActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel) orderItemTable.getModel();
            setOrder(model);
            setTable(model);
        } catch (SQLException ex) {
            Logger.getLogger(AddOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_breakfastButtonActionPerformed

    private void sweetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sweetButtonActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel) orderItemTable.getModel();
            setOrder(model);
            setTable(model);
        } catch (SQLException ex) {
            Logger.getLogger(AddOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sweetButtonActionPerformed

    private void lunchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lunchButtonActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel) orderItemTable.getModel();
            setOrder(model);
            setTable(model);
        } catch (SQLException ex) {
            Logger.getLogger(AddOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_lunchButtonActionPerformed

    private void dinnerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dinnerButtonActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel) orderItemTable.getModel();
            setOrder(model);
            setTable(model);
        } catch (SQLException ex) {
            Logger.getLogger(AddOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_dinnerButtonActionPerformed

    private void fruitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fruitButtonActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel) orderItemTable.getModel();
            setOrder(model);
            setTable(model);
        } catch (SQLException ex) {
            Logger.getLogger(AddOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_fruitButtonActionPerformed

    private void backeryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backeryButtonActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel) orderItemTable.getModel();
            setOrder(model);
            setTable(model);
        } catch (SQLException ex) {
            Logger.getLogger(AddOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_backeryButtonActionPerformed

    private void bigOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bigOrderButtonActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel) orderItemTable.getModel();
            setOrder(model);
            setTable(model);
        } catch (SQLException ex) {
            Logger.getLogger(AddOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bigOrderButtonActionPerformed

    private void orderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) orderItemTable.getModel();
        setOrder(model);
        if(AddOrder.o.sellerName.isEmpty()){
            JOptionPane.showMessageDialog(null, "make your order");
        }
        else{
            for(int i=0;i<AddOrder.o.sellerName.size();i++){
                String quary = "INSERT INTO orders (itemID , sellerID , numberofitem , fee , customerID) VALUES ('"+ AddOrder.o.iID.get(i) +"' , '"+ AddOrder.o.selID.get(i) +"' , '"+ AddOrder.o.noOfItem.get(i) +"' , '"+ AddOrder.o.totalPrice.get(i) +"' , '"+ customerID +"')";
                try {
                    pst2 = con.prepareStatement(quary);
                    pst2.execute();
                } catch (SQLException ex) {
                    Logger.getLogger(AddOrder.class.getName()).log(Level.SEVERE, null, ex);
                }  
            }
            o.sellerName.clear();
            o.itemName.clear();
            o.price.clear();
            o.noOfItem.clear();
            o.selID.clear();
            o.iID.clear();
            o.totalPrice.clear();
            JOptionPane.showMessageDialog(null, "ordered succesfully");
        }
    }//GEN-LAST:event_orderButtonActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) orderItemTable.getModel();
        setOrder(model);
        for(int i=0;i<model.getRowCount();i++){
           if((Boolean) orderItemTable.getModel().getValueAt(i, 5)){
               orderItemTable.getModel().setValueAt(false, i, 5);
            } 
        }
        OrderList ol = new OrderList();
        ol.setVisible(true);
    }//GEN-LAST:event_viewButtonActionPerformed

    private void profileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileButtonActionPerformed
        if(onlyCustomer){
            try {
                customerProfile cp = new customerProfile();
                cp.setVisible(true);
                this.dispose();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(AddOrder.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            try {
                customerSellerProfile csp = new customerSellerProfile();
                csp.setVisible(true);
                this.dispose();
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(AddOrder.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_profileButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private void setTable(DefaultTableModel model) throws SQLException{
        String qurey1 = "SELECT sellers.username , sellers.sellerID , items.itemname , items.itemID , items.available , items.price FROM items INNER JOIN sellers ON sellers.sellerID = items.sellerID WHERE items.deletestatus = ?";
        String qurey2 = "SELECT sellers.username , sellers.sellerID , items.itemname , items.itemID , items.available , items.price FROM items INNER JOIN sellers ON sellers.sellerID = items.sellerID WHERE items.deletestatus = ? AND items.breakfast = ?";
        String qurey3 = "SELECT sellers.username , sellers.sellerID , items.itemname , items.itemID , items.available , items.price FROM items INNER JOIN sellers ON sellers.sellerID = items.sellerID WHERE items.deletestatus = ? AND items.lunch = ?";
        String qurey4 = "SELECT sellers.username , sellers.sellerID , items.itemname , items.itemID , items.available , items.price FROM items INNER JOIN sellers ON sellers.sellerID = items.sellerID WHERE items.deletestatus = ? AND items.dinner = ?";
        String qurey5 = "SELECT sellers.username , sellers.sellerID , items.itemname , items.itemID , items.available , items.price FROM items INNER JOIN sellers ON sellers.sellerID = items.sellerID WHERE items.deletestatus = ? AND items.sweet = ?";
        String qurey6 = "SELECT sellers.username , sellers.sellerID , items.itemname , items.itemID , items.available , items.price FROM items INNER JOIN sellers ON sellers.sellerID = items.sellerID WHERE items.deletestatus = ? AND items.fruit = ?";
        String qurey7 = "SELECT sellers.username , sellers.sellerID , items.itemname , items.itemID , items.available , items.price FROM items INNER JOIN sellers ON sellers.sellerID = items.sellerID WHERE items.deletestatus = ? AND items.backery = ?";
        String qurey8 = "SELECT sellers.username , sellers.sellerID , items.itemname , items.itemID , items.available , items.price FROM items INNER JOIN sellers ON sellers.sellerID = items.sellerID WHERE items.deletestatus = ? AND items.bigorder = ?";
            
        if(breakfastButton.isSelected()){
            selName.clear();
            itemName.clear();
            availability.clear();
            price.clear();
            selID.clear();
            iID.clear();
            
            pst1 = con.prepareStatement(qurey2);
            pst1.setString(1, notDel);
            pst1.setString(2, t);
            rs1 = pst1.executeQuery();

            while(rs1.next()){
                selName.add(rs1.getString("sellers.username"));
                itemName.add(rs1.getString("items.itemname"));
                availability.add(rs1.getString("items.available"));
                price.add(rs1.getString("items.price"));
                selID.add(rs1.getString("sellers.sellerID"));
                iID.add(rs1.getString("items.itemID"));
            }

            Object rowData[] = new Object[6];
            model.setRowCount(0);

            for(int i=0;i<itemName.size();i++){
                rowData[0] = selName.get(i);
                rowData[1] = itemName.get(i);
                rowData[2] = availability.get(i);
                rowData[3] = price.get(i);
                rowData[4] = 0;
                rowData[5] = false;
                model.addRow(rowData); 
            }  
        }
        
        else if(lunchButton.isSelected()){
            selName.clear();
            itemName.clear();
            availability.clear();
            price.clear();
            selID.clear();
            iID.clear();
            
            pst1 = con.prepareStatement(qurey3);
            pst1.setString(1, notDel);
            pst1.setString(2, t);
            rs1 = pst1.executeQuery();

            while(rs1.next()){
                selName.add(rs1.getString("sellers.username"));
                itemName.add(rs1.getString("items.itemname"));
                availability.add(rs1.getString("items.available"));
                price.add(rs1.getString("items.price"));
                selID.add(rs1.getString("sellers.sellerID"));
                iID.add(rs1.getString("items.itemID"));
            }
            Object rowData[] = new Object[6];
            model.setRowCount(0);
            
            for(int i=0;i<itemName.size();i++){
                rowData[0] = selName.get(i);
                rowData[1] = itemName.get(i);
                rowData[2] = availability.get(i);
                rowData[3] = price.get(i);
                rowData[4] = 0;
                rowData[5] = false;
                model.addRow(rowData); 
            }  
        }
        
        else if(dinnerButton.isSelected()){
            selName.clear();
            itemName.clear();
            availability.clear();
            price.clear();
            selID.clear();
            iID.clear();
            
            pst1 = con.prepareStatement(qurey4);
            pst1.setString(1, notDel);
            pst1.setString(2, t);
            rs1 = pst1.executeQuery();

            while(rs1.next()){
                selName.add(rs1.getString("sellers.username"));
                itemName.add(rs1.getString("items.itemname"));
                availability.add(rs1.getString("items.available"));
                price.add(rs1.getString("items.price"));
                selID.add(rs1.getString("sellers.sellerID"));
                iID.add(rs1.getString("items.itemID"));
            }
            Object rowData[] = new Object[6];
            model.setRowCount(0);
            
            for(int i=0;i<itemName.size();i++){
                rowData[0] = selName.get(i);
                rowData[1] = itemName.get(i);
                rowData[2] = availability.get(i);
                rowData[3] = price.get(i);
                rowData[4] = 0;
                rowData[5] = false;
                model.addRow(rowData); 
            }  
        }
        
        else if(sweetButton.isSelected()){
            selName.clear();
            itemName.clear();
            availability.clear();
            price.clear();
            selID.clear();
            iID.clear();
            
            pst1 = con.prepareStatement(qurey5);
            pst1.setString(1, notDel);
            pst1.setString(2, t);
            rs1 = pst1.executeQuery();

            while(rs1.next()){
                selName.add(rs1.getString("sellers.username"));
                itemName.add(rs1.getString("items.itemname"));
                availability.add(rs1.getString("items.available"));
                price.add(rs1.getString("items.price"));
                selID.add(rs1.getString("sellers.sellerID"));
                iID.add(rs1.getString("items.itemID"));
            }
            Object rowData[] = new Object[6];
            model.setRowCount(0);
            
            for(int i=0;i<itemName.size();i++){
                rowData[0] = selName.get(i);
                rowData[1] = itemName.get(i);
                rowData[2] = availability.get(i);
                rowData[3] = price.get(i);
                rowData[4] = 0;
                rowData[5] = false;
                model.addRow(rowData); 
            }  
        }
        
        else if(fruitButton.isSelected()){
            selName.clear();
            itemName.clear();
            availability.clear();
            price.clear();
            selID.clear();
            iID.clear();
            
            pst1 = con.prepareStatement(qurey6);
            pst1.setString(1, notDel);
            pst1.setString(2, t);
            rs1 = pst1.executeQuery();

            while(rs1.next()){
                selName.add(rs1.getString("sellers.username"));
                itemName.add(rs1.getString("items.itemname"));
                availability.add(rs1.getString("items.available"));
                price.add(rs1.getString("items.price"));
                selID.add(rs1.getString("sellers.sellerID"));
                iID.add(rs1.getString("items.itemID"));
            }
            Object rowData[] = new Object[6];
            model.setRowCount(0);
            
            for(int i=0;i<itemName.size();i++){
                rowData[0] = selName.get(i);
                rowData[1] = itemName.get(i);
                rowData[2] = availability.get(i);
                rowData[3] = price.get(i);
                rowData[4] = 0;
                rowData[5] = false;
                model.addRow(rowData); 
            }  
        }
        
        else if(backeryButton.isSelected()){
            selName.clear();
            itemName.clear();
            availability.clear();
            price.clear();
            selID.clear();
            iID.clear();
            
            pst1 = con.prepareStatement(qurey7);
            pst1.setString(1, notDel);
            pst1.setString(2, t);
            rs1 = pst1.executeQuery();

            while(rs1.next()){
                selName.add(rs1.getString("sellers.username"));
                itemName.add(rs1.getString("items.itemname"));
                availability.add(rs1.getString("items.available"));
                price.add(rs1.getString("items.price"));
                selID.add(rs1.getString("sellers.sellerID"));
                iID.add(rs1.getString("items.itemID"));
            }
            Object rowData[] = new Object[6];
            model.setRowCount(0);
            
            for(int i=0;i<itemName.size();i++){
                rowData[0] = selName.get(i);
                rowData[1] = itemName.get(i);
                rowData[2] = availability.get(i);
                rowData[3] = price.get(i);
                rowData[4] = 0;
                rowData[5] = false;
                model.addRow(rowData); 
            }  
        }
        
        else if(bigOrderButton.isSelected()){
            selName.clear();
            itemName.clear();
            availability.clear();
            price.clear();
            selID.clear();
            iID.clear();
            
            pst1 = con.prepareStatement(qurey8);
            pst1.setString(1, notDel);
            pst1.setString(2, t);
            rs1 = pst1.executeQuery();

            while(rs1.next()){
                selName.add(rs1.getString("sellers.username"));
                itemName.add(rs1.getString("items.itemname"));
                availability.add(rs1.getString("items.available"));
                price.add(rs1.getString("items.price"));
                selID.add(rs1.getString("sellers.sellerID"));
                iID.add(rs1.getString("items.itemID"));
            }
            Object rowData[] = new Object[6];
            model.setRowCount(0);
            
            for(int i=0;i<itemName.size();i++){
                rowData[0] = selName.get(i);
                rowData[1] = itemName.get(i);
                rowData[2] = availability.get(i);
                rowData[3] = price.get(i);
                rowData[4] = 0;
                rowData[5] = false;
                model.addRow(rowData); 
            }  
        }
        
        else{
            selName.clear();
            itemName.clear();
            availability.clear();
            price.clear();
            selID.clear();
            iID.clear();
            
            pst1 = con.prepareStatement(qurey1);
            pst1.setString(1, notDel);
            rs1 = pst1.executeQuery();

            while(rs1.next()){
                selName.add(rs1.getString("sellers.username"));
                itemName.add(rs1.getString("items.itemname"));
                availability.add(rs1.getString("items.available"));
                price.add(rs1.getString("items.price"));
                selID.add(rs1.getString("sellers.sellerID"));
                iID.add(rs1.getString("items.itemID"));
            }
            Object rowData[] = new Object[6];
            model.setRowCount(0);
            
            for(int i=0;i<itemName.size();i++){
                rowData[0] = selName.get(i);
                rowData[1] = itemName.get(i);
                rowData[2] = availability.get(i);
                rowData[3] = price.get(i);
                rowData[4] = 0;
                rowData[5] = false;
                model.addRow(rowData); 
            }
        }
    }
    
    private void setOrder(DefaultTableModel model){
        for(int i=0;i<model.getRowCount();i++){
            if((Boolean) orderItemTable.getModel().getValueAt(i, 5)){
                o.sellerName.add(orderItemTable.getModel().getValueAt(i, 0));
                o.itemName.add(orderItemTable.getModel().getValueAt(i, 1));
                o.price.add(orderItemTable.getModel().getValueAt(i, 3));
                o.noOfItem.add(orderItemTable.getModel().getValueAt(i, 4));
                o.selID.add(selID.get(i));
                o.iID.add(iID.get(i));  
            }
        }
    }
    
    public void setCustomerID() throws SQLException{
        
        String query;
        query = "SELECT customerID FROM customers WHERE email = ?";
        pst3 = con.prepareStatement(query);
        pst3.setString(1, email);
        rs2 = pst3.executeQuery();
        if(rs2.next()){
            customerID = rs2.getInt("customerID");
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new AddOrder().setVisible(true);
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(AddOrder.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton backeryButton;
    private javax.swing.JRadioButton bigOrderButton;
    private javax.swing.JRadioButton breakfastButton;
    private javax.swing.ButtonGroup catagoryGroup;
    private javax.swing.JRadioButton dinnerButton;
    private javax.swing.JRadioButton fruitButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton lunchButton;
    private javax.swing.JButton orderButton;
    private javax.swing.JTable orderItemTable;
    private javax.swing.JButton profileButton;
    private javax.swing.JRadioButton sweetButton;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables
}
