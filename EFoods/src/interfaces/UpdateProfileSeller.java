/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaces;

import code.DBConnect;
import static interfaces.sellerProfile.email;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public final class UpdateProfileSeller extends javax.swing.JFrame {

    /**
     * Creates new form UpdateProfile
     */
    
    Connection con = null;
    PreparedStatement pst = null;
    PreparedStatement pst0 = null;
    PreparedStatement pst1 = null;
    PreparedStatement pst2 = null;
    PreparedStatement pst3 = null;
    PreparedStatement pst4 = null;
    PreparedStatement pst5 = null;
    PreparedStatement pst6 = null;
    PreparedStatement pst7 = null;
    ResultSet rs1 = null;
    ResultSet rs2 = null;
    ResultSet rs3 = null;
    ResultSet rs4 = null;
    ResultSet rs5 = null;
    ResultSet rs6 = null;
    ResultSet rs7 = null;
    ArrayList list = new ArrayList();
    ArrayList catagory = new ArrayList();
    ArrayList updateCatagoryList = new ArrayList();
    ArrayList updateFalseCatagoryList = new ArrayList();
    String t = "true";
    String f = "false";
    
    public UpdateProfileSeller() throws ClassNotFoundException, SQLException {
        initComponents();
        userNameBox.setText(sellerProfile.username);
        mobileNumberBox.setText(sellerProfile.mobilenumber);
        con = DBConnect.connection();
        setTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userNameBox = new javax.swing.JTextField();
        mobileNumberBox = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        catagoryTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        profileButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Update Profile");

        userNameBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameBoxActionPerformed(evt);
            }
        });

        mobileNumberBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mobileNumberBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("user name");

        jLabel3.setText("mobile number");

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        catagoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "All Catogaries", "Selected catagories", "Change Catagories"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(catagoryTable);

        jLabel2.setText("Food Item Catagory");

        profileButton.setText("Profile");
        profileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(profileButton)
                .addGap(59, 59, 59))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(mobileNumberBox, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(90, 90, 90)
                                .addComponent(userNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(209, 209, 209)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(231, 231, 231)
                        .addComponent(updateButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(profileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(mobileNumberBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(jLabel2)
                .addGap(45, 45, 45)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(updateButton)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void userNameBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameBoxActionPerformed

    private void mobileNumberBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mobileNumberBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mobileNumberBoxActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        String userName;
        String mobileNumber;
        String email;
        
        email = sellerProfile.email;
        userName = userNameBox.getText();
        mobileNumber = mobileNumberBox.getText();
        setUpdateCatagoryList();
        setUpdateFalseCatagoryList();
        
        sellerProfile.username = userName;
        sellerProfile.mobilenumber = mobileNumber;
        
        String query = "UPDATE sellers SET username = ? , mobilenumber = ? WHERE email = ?";
        
        String query01 = "UPDATE sellers SET breakfast = ? WHERE email = ?";
        String query02 = "UPDATE sellers SET lunch = ? WHERE email = ?";
        String query03 = "UPDATE sellers SET dinner = ? WHERE email = ?";
        String query04 = "UPDATE sellers SET sweet = ? WHERE email = ?";
        String query05 = "UPDATE sellers SET fruit = ? WHERE email = ?";
        String query06 = "UPDATE sellers SET backery = ? WHERE email = ?";
        String query07 = "UPDATE sellers SET bigorder = ? WHERE email = ?";
        
        try {
            pst = con.prepareStatement(query);
            pst.setString(1, userName);
            pst.setString(2, mobileNumber);
            pst.setString(3, email);
            pst.execute();
            
            for(int i=0;i<updateCatagoryList.size();i++){
                if(updateCatagoryList.get(i) == "breakfast"){
                    pst0 = con.prepareStatement(query01);
                    pst0.setString(1, t);
                    pst0.setString(2, email);
                    pst0.execute();
                }
                else if(updateCatagoryList.get(i) == "lunch"){
                    pst0 = con.prepareStatement(query02);
                    pst0.setString(1, t);
                    pst0.setString(2, email);
                    pst0.execute();
                }
                else if(updateCatagoryList.get(i) == "dinner"){
                    pst0 = con.prepareStatement(query03);
                    pst0.setString(1, t);
                    pst0.setString(2, email);
                    pst0.execute();
                }
                else if(updateCatagoryList.get(i) == "sweet"){
                    pst0 = con.prepareStatement(query04);
                    pst0.setString(1, t);
                    pst0.setString(2, email);
                    pst0.execute();
                }
                else if(updateCatagoryList.get(i) == "fruit"){
                    pst0 = con.prepareStatement(query05);
                    pst0.setString(1, t);
                    pst0.setString(2, email);
                    pst0.execute();
                }
                else if(updateCatagoryList.get(i) == "backery"){
                    pst0 = con.prepareStatement(query06);
                    pst0.setString(1, t);
                    pst0.setString(2, email);
                    pst0.execute();
                }
                else if(updateCatagoryList.get(i) == "bigorder"){
                    pst0 = con.prepareStatement(query07);
                    pst0.setString(1, t);
                    pst0.setString(2, email);
                    pst0.execute();
                }
            }
            
            for(int i=0;i<updateFalseCatagoryList.size();i++){
                if(updateFalseCatagoryList.get(i) == "breakfast"){
                    pst0 = con.prepareStatement(query01);
                    pst0.setString(1, f);
                    pst0.setString(2, email);
                    pst0.execute();
                }
                else if(updateFalseCatagoryList.get(i) == "lunch"){
                    pst0 = con.prepareStatement(query02);
                    pst0.setString(1, f);
                    pst0.setString(2, email);
                    pst0.execute();
                }
                else if(updateFalseCatagoryList.get(i) == "dinner"){
                    pst0 = con.prepareStatement(query03);
                    pst0.setString(1, f);
                    pst0.setString(2, email);
                    pst0.execute();
                }
                else if(updateFalseCatagoryList.get(i) == "sweet"){
                    pst0 = con.prepareStatement(query04);
                    pst0.setString(1, f);
                    pst0.setString(2, email);
                    pst0.execute();
                }
                else if(updateFalseCatagoryList.get(i) == "fruit"){
                    pst0 = con.prepareStatement(query05);
                    pst0.setString(1, f);
                    pst0.setString(2, email);
                    pst0.execute();
                }
                else if(updateFalseCatagoryList.get(i) == "backery"){
                    pst0 = con.prepareStatement(query06);
                    pst0.setString(1, f);
                    pst0.setString(2, email);
                    pst0.execute();
                }
                else if(updateFalseCatagoryList.get(i) == "bigorder"){
                    pst0 = con.prepareStatement(query07);
                    pst0.setString(1, f);
                    pst0.setString(2, email);
                    pst0.execute();
                }
            }
            
            this.dispose();
            JOptionPane.showMessageDialog(null , "your profile updated");
            sellerProfile sp = new sellerProfile();
            sp.setVisible(true);
        } 
        catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(UpdateProfileSeller.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_updateButtonActionPerformed

    private void profileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileButtonActionPerformed
        try {
            sellerProfile sp;
            sp = new sellerProfile();
            sp.setVisible(true);
            this.dispose();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UpdateProfileCustomer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(UpdateProfileSeller.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_profileButtonActionPerformed

    /**
     * @throws java.sql.SQLException
     */
    public void setTable() throws SQLException{
        String t = "true";
        String queary1 = "SELECT sellerID FROM sellers WHERE (email = ? AND breakfast = ?)";
        String queary2 = "SELECT sellerID FROM sellers WHERE (email = ? AND lunch = ?)";
        String queary3 = "SELECT sellerID FROM sellers WHERE (email = ? AND dinner = ?)";
        String queary4 = "SELECT sellerID FROM sellers WHERE (email = ? AND sweet = ?)";
        String queary5 = "SELECT sellerID FROM sellers WHERE (email = ? AND fruit = ?)";
        String queary6 = "SELECT sellerID FROM sellers WHERE (email = ? AND backery = ?)";
        String queary7 = "SELECT sellerID FROM sellers WHERE (email = ? AND bigorder = ?)";
        DefaultTableModel model = (DefaultTableModel) catagoryTable.getModel();
        Object rowData[] = new Object[3];
        
        catagory.add("breakfast");
        catagory.add("lunch");
        catagory.add("dinner");
        catagory.add("sweet");
        catagory.add("fruit");
        catagory.add("backery");
        catagory.add("bigorder");
        
        pst1 = con.prepareStatement(queary1);
        pst1.setString(1, email);
        pst1.setString(2, t);
        rs1 = pst1.executeQuery();
        if(rs1.next()){
            list.add("breakfast");
        }
        
        pst2 = con.prepareStatement(queary2);
        pst2.setString(1, email);
        pst2.setString(2, t);
        rs2 = pst2.executeQuery();
        if(rs2.next()){
            list.add("lunch");
        }
        
        pst3 = con.prepareStatement(queary3);
        pst3.setString(1, email);
        pst3.setString(2, t);
        rs3 = pst3.executeQuery();
        if(rs3.next()){
            list.add("dinner");
        }
        
        pst4 = con.prepareStatement(queary4);
        pst4.setString(1, email);
        pst4.setString(2, t);
        rs4 = pst4.executeQuery();
        if(rs4.next()){
            list.add("sweet");
        }
        
        pst5 = con.prepareStatement(queary5);
        pst5.setString(1, email);
        pst5.setString(2, t);
        rs5 = pst5.executeQuery();
        if(rs5.next()){
            list.add("fruit");
        }
        
        pst6 = con.prepareStatement(queary6);
        pst6.setString(1, email);
        pst6.setString(2, t);
        rs6 = pst6.executeQuery();
        if(rs6.next()){
            list.add("backery");
        }
        
        pst7 = con.prepareStatement(queary7);
        pst7.setString(1, email);
        pst7.setString(2, t);
        rs7 = pst7.executeQuery();
        if(rs7.next()){
            list.add("bigorder");
        }
        for(int i=0;i<catagory.size();i++){
            if(i<list.size()){
                rowData[0] = catagory.get(i);
                rowData[1] = list.get(i);
                rowData[2] = shouldSelect((String) catagory.get(i));
                model.addRow(rowData);
            }
            else{
                rowData[0] = catagory.get(i);
                rowData[1] = "-";
                rowData[2] = shouldSelect((String) catagory.get(i));
                model.addRow(rowData);
            }
        }
    }
    private Boolean shouldSelect(String x){
        for(int i=0;i<list.size();i++){
            if(list.get(i) == x){
                return true;
            }
        }
        return false;
    }
    
    private void setUpdateCatagoryList(){
        String x;
        for(int i=0; i<catagoryTable.getRowCount();i++){
            if((Boolean) catagoryTable.getModel().getValueAt(i, 2)){
                x = (String) catagoryTable.getModel().getValueAt(i, 0);
                updateCatagoryList.add(x);
            }
        }
    }
    
    private void setUpdateFalseCatagoryList(){
        String x;
        for(int i=0; i<catagoryTable.getRowCount();i++){
            if(!(Boolean) catagoryTable.getModel().getValueAt(i, 2)){
                x = (String) catagoryTable.getModel().getValueAt(i, 0);
                updateFalseCatagoryList.add(x);
            }
        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateProfileSeller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateProfileSeller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateProfileSeller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateProfileSeller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new UpdateProfileSeller().setVisible(true);
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(UpdateProfileSeller.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable catagoryTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField mobileNumberBox;
    private javax.swing.JButton profileButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JTextField userNameBox;
    // End of variables declaration//GEN-END:variables
}
